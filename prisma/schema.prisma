generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int           @id @default(autoincrement())
  username       String        @unique
  password       String
  email          String        @unique
  firstName      String        @map("first_name")
  lastName       String        @map("last_name")
  phone          String?
  status         String        @default("ACTIVE")
  role          String        @default("USER")
  createdAt      DateTime?     @default(now()) @map("created_at")
  updatedAt      DateTime?     @default(now()) @updatedAt @map("updated_at")
  activityLogs   ActivityLog[]
  agentEvents    AgentEvent[]  @relation("AgentToEvent")
  tickets        Ticket[]
  validatedTickets Ticket[]    @relation("ValidatedTickets")

  @@map("users")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?  @db.Text
  slug        String   @unique
  active      Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  events      Event[]

  @@map("categories")
}

model Event {
  id          Int          @id @default(autoincrement())
  title       String
  description String       @db.Text
  startDate   DateTime     @map("start_date")
  endDate     DateTime     @map("end_date")
  isMultiDay  Boolean      @default(false) @map("is_multi_day")
  hasSpecificTime Boolean  @default(true) @map("has_specific_time")
  startTime   String?      @map("start_time")
  endTime     String?      @map("end_time")
  location    String
  status      String       @default("DRAFT")
  organizer   String?
  createdAt   DateTime?    @default(now()) @map("created_at")
  updatedAt   DateTime?    @default(now()) @updatedAt @map("updated_at")
  imageUrl    String?      @map("image_url")
  categoryId  Int?         @map("category_id")
  agentEvents AgentEvent[]
  ticketTypes TicketType[]
  category    Category?    @relation(fields: [categoryId], references: [id])

  @@index([categoryId], map: "events_category_id_fkey")
  @@map("events")
}

model TicketType {
  id          Int       @id @default(autoincrement())
  name        String
  price       Float
  quantity    Int
  description String?   @db.Text
  eventId     Int
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @default(now()) @updatedAt
  tickets     Ticket[]
  event       Event     @relation(fields: [eventId], references: [id])

  @@index([eventId], map: "TicketType_eventId_fkey")
}

model Ticket {
  id             Int                     @id @default(autoincrement())
  ticketTypeId   Int
  userId         Int
  status         String                  @default("PENDING")
  code           String                  @unique
  createdAt      DateTime?               @default(now())
  updatedAt      DateTime?               @default(now()) @updatedAt
  validationDate DateTime?
  validatedById  Int?
  ticketType     TicketType              @relation(fields: [ticketTypeId], references: [id])
  user           User                    @relation(fields: [userId], references: [id])
  validatedBy    User?                   @relation("ValidatedTickets", fields: [validatedById], references: [id])
  transaction    MobileMoneyTransaction?

  @@index([ticketTypeId], map: "Ticket_ticketTypeId_fkey")
  @@index([userId], map: "Ticket_userId_fkey")
  @@index([validatedById], map: "Ticket_validatedById_fkey")
}

model AgentEvent {
  agentId   Int
  eventId   Int
  createdAt DateTime @default(now())
  agent     User     @relation("AgentToEvent", fields: [agentId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id])

  @@id([agentId, eventId])
  @@index([eventId], map: "AgentEvent_eventId_fkey")
}

model ActivityLog {
  id         Int      @id @default(autoincrement())
  userId     Int
  action     String
  entityType String
  entityId   Int
  details    String?  @db.Text
  ipAddress  String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "ActivityLog_userId_fkey")
}

model MobileMoneyTransaction {
  id                   Int       @id @default(autoincrement())
  ticketId             Int       @unique
  transactionReference String    @unique
  amount               Float
  phoneNumber          String?
  provider             String
  status               String    @default("PENDING")
  paymentUrl           String?
  paymentToken         String?
  responseData         String?   @db.Text
  createdAt            DateTime? @default(now())
  updatedAt            DateTime? @default(now()) @updatedAt
  userId               Int
  ticketTypeId         Int
  quantity             Int       @default(1)
  ticket               Ticket    @relation(fields: [ticketId], references: [id])

  @@index([ticketTypeId], map: "idx_ticket_type_id")
  @@index([userId], map: "idx_user_id")
  @@map("mobile_money_transactions")
}
